####################################################################################
# 				How to Use
# 
# (1) Build the project
#   make -f Makefile.V2
# (2) Run the executable
#   ./main
# (3) Clean the project
#   make -f Makefile.V2 clean
# 
# If you want to know more about makefile, please refer to:
#
#    https://www.gnu.org/software/make/manual/html_node/Rule-Syntax.html
#
# You can reuse this Makefile in different assignments/projects in COMP9024.
# To be simple, please put your *.c and *.h in the src directory.
#
#                                                                COMP9024
####################################################################################
PROJ_ROOT_PATH = $(shell pwd)


TARGET_EXE = main
BUILD_DIR = build

C_SRC_FILES = $(shell find ./src -name "*.c")
H_SRC_FILES = $(shell find ./src -name "*.h")

# src/*.c  --->  src/*.o ---> build/*.o
TMP_OBJ_FILES = $(C_SRC_FILES:.c=.o)
OBJ_FILES_IN_BUILD =$(subst src/,$(BUILD_DIR)/,$(TMP_OBJ_FILES))

# src/*.c  --->  src/*.d ---> build/*.d
TMP_D_FILES = $(C_SRC_FILES:.c=.d)
D_FILES_IN_BUILD =$(subst src/,$(BUILD_DIR)/,$(TMP_D_FILES))

CC= gcc 
#CFLAGS = -g -no-pie --save-temps -I $(PROJ_ROOT_PATH)/src 
#CFLAGS = -no-pie --save-temps -fno-asynchronous-unwind-tables -I $(PROJ_ROOT_PATH)/src
CFLAGS = -g -I $(PROJ_ROOT_PATH)/src  

# create a directory  
$(shell mkdir -p $(BUILD_DIR))

# the default target
all: 
	make $(TARGET_EXE)

# generate the target, which depends on the "build/*.o" files
$(TARGET_EXE):  $(OBJ_FILES_IN_BUILD) 	
	$(CC) $(CFLAGS) -o $(TARGET_EXE) $(OBJ_FILES_IN_BUILD)

# How to generate a "build/*.o" from a "src/*.c"
$(BUILD_DIR)/%.o: src/%.c
	@mkdir -p $(shell dirname $@)
	${CC} ${CFLAGS} -c $< -o $@

# https://www.gnu.org/software/make/manual/html_node/Include.html
# include the *.d files
-include $(D_FILES_IN_BUILD)

##############################################################################
# Please refer to:  
#    https://www.gnu.org/software/make/manual/html_node/Automatic-Prerequisites.html
#
# Generate dependency files (*.d) for the C files (*.c).
# A "*.c" file depends on multiple "*.h" files.
# We can use 'gcc -MM' to generate the dependency files.
# The dependency relationships in makefile can be seen as a DAG (Directed Acyclic Graph).
#
# For example:
#      src/main.c  --->  build/main.d
# 
# (1)  gcc -MM src/main.c > build/main.d.xxxx
#
#      The dependency contained in main.d.xxxx (a temporary file):
#
#          main.o: src/main.c src/myadd.h src/mysub.h
#
# (2)  The sed command is used to add "build/main.d" 
#
#      build/main.o build/main.d : src/main.c src/myadd.h src/mysub.h
#
# (3)  $@      
#                       the name of the target being generated,  e.g., build/main.d
#      @<      
#                       the first prerequisite (usually a source file), e.g., src/main.c
#      $@.$$$$ 		
#                       a temporary file,   e.g., main.d.xxxx  
#                       $$$$ in makefiie --> passed as $$ to the shell
#                                            $$ in shell means the PID of the current process
#      $*               
#                       an automatic variable which will expand to the stem of the target 
#                       (the text matching the % in the pattern).
#                       If $@ is "build/main.d", $* will be "main" in this pattern.
# 
#      sed  '...'  < $@.$$$$ > $@
#                       I/O redirection
#                       set $@.$$$$ (e.g., main.d.xxxx) to be the stand input of sed 
#                       set $@ (e.g., main.d) to be the stand output of sed
#                       That is, the program 'sed' reads from main.d.xxxx and writes to main.d.
############################################################################
$(BUILD_DIR)/%.d: src/%.c
	mkdir -p $(shell dirname $@); \
	$(CC) $(CFLAGS) -MM $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,$(dirname $@)/\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

# clean all the files generated	
clean:
	rm -rf $(TARGET_EXE) $(BUILD_DIR)
	find . -name "*.o" | xargs rm -f
	find . -name "*.s" | xargs rm -f
	find . -name "*.i" | xargs rm -f
	find . -name "*.d" | xargs rm -f
	find . -name "*.bc" | xargs rm -f

